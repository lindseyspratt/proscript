<div class="indexed body" id="home">
    <div class="indexed" id="prolog-for-the-web">
        <h2>Prolog for the Web</h2>
        <p>The ProscriptLS language is a version of Prolog that runs in web browsers.
        It aspires to be a superset of ISO Prolog that is a complete alternative to
        Javascript for implementing web sites.
        (This site is implemented using ProscriptLS instead of Javascript.)
        </p>
        <p>It supports interaction with the HTML Document Object Model (DOM) through builtin predicates.
        There is a full source-level Prolog debugger based on the Byrd Box Model
        available through an in-client command-line ProscriptLS interpreter.
        </p>
        <p>
        The implementation uses a runtime engine that interprets byte codes.
        This engine is implemented in Javascript and is
        a version of the Warren Abstract Machine (WAM).
        </p>
    </div>
    <div class="indexed" id="running-proscriptls">
        <h3>Running ProscriptLS</h3>
        ProscriptLS is started by the proscript_init function (implemented in the proscriptls.js library).
        This function is typically invoked once per load of the web page in an onload handler for the 'body'
        element:
        <pre class="html"><code>
&lt;body onload=
        "proscript_init();">
Body stuff
&lt;/body>
</code></pre>
    </div>
    <div class="indexed" id="compiling-proscriptls">
        <h3>Compiling ProscriptLS programs in the web client</h3>
        The proscript_init function supports compilation of ProscriptLS programs in the client
        using the 'script' tag with the 'type' attribute of 'text/prolog'
        or using the ProscriptLS 'consult/1' predicate.
        <h4>Compilation Examples</h4>
        <ul>
            <li>The 'script' tag with the source being a file specified using the
                'src' attribute:
                <br>
                <pre class="html"><code>
&lt;script type="text/prolog"
        src="my_program.pl">
&lt;/script>
</code></pre>
            </li>
            <li>
                The 'script' tag with the source as the text content of the 'script' element:
                <pre class="html"><code>
&lt;script type="text/prolog">
my_program :-
    some_code.
&lt;/script>
</code></pre>
            </li>
            <li>
                Consulting a source file using the proscriptls function:
                <pre class="html"><code>
&lt;body onLoad= "proscriptls( 'consult([my_program])');">
More HTML
&lt;/body>
</code></pre>
            </li>
        </ul>
    </div>
    <div class="indexed" id="basic-example">
        <h3>Basic Example</h3>
        The following HTML source is a basic example showing the use of a ProscriptLS program to create
        a 'click me' button that when clicked displays a 'Hello World' alert dialog.
        <pre class="html"><code>
&lt;html lang="en">
&lt;head>
    &lt;title>ProscriptLS Basic&lt;/title>
&lt;/head>
&lt;body onload="proscript_init();">
&lt;div>
    &lt;h2>ProscriptLS Basic&lt;/h2>
    &lt;p>
        The button displays an alert
        dialog containing
        'Hello World'
    &lt;/p>
    &lt;div id="basic">&lt;/div>
&lt;/div>
&lt;script type="text/javascript"
        src="../dist/proscriptls.js">
&lt;/script>
&lt;script type="text/prolog">
:- initialization(setup_button).

setup_button :-
    dom_element_attribute_value(E, id, basic),
    create_dom_element('BUTTON', Button),
    create_dom_text_node("Click Me", NewContent),
    append_dom_node_child(Button, NewContent),
    dom_object_method(Button,
        addEventListener(click,
            alert('Hello World!'))),
    append_dom_node_child(E, Button).
&lt;/script>
&lt;/body>
&lt;/html>
</code></pre>
        The ':- initialization(setup_button).' statement in the Prolog source is a Prolog compiler
        directive that causes the wam_compiler to evaluate 'setup_button' after completing the compilation
        of the Prolog source in that 'script' element.
    </div>
</div>
