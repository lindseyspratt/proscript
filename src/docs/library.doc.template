<h3>Library:</h3> there is a collection of ProscriptLS source files that provide a library of programs.
These are in PROSCRIPTLS_git/library.

Some of these files are from the Edinburgh DEC-10 Prolog as found
at <a href="http://www.j-paine.org/prolog/library.html">http://www.j-paine.org/prolog/library.html</a>
<ul>
<li>between.pl:
    From Edinburgh DEC-10 library.
    <ul>
        <li> between(+L, +U, ?N): True for all integers N between L (lower) and U (upper).
            If N is unbound on evaluation then it is generated in order from L to U (repeating on
            failure).
        </li>
        <li> gen_arg(?N, +Term, ?Arg):
            is exactly like arg(N, Term, Arg), except that it will generate
            solutions for N by backtracking (will work when N is a variable).
        </li>
        <li> gen_nat/1, gen_nat/2, gen_int/1: generate integers.
            Originally by R O'Keefe.
            <ul>
                <li>gen_nat(+X): True if X is a natural number, false otherwise</li>
                <li>gen_nat(-X): Instantiates X to 0, then 1, 2, 3, 4...</li>
                <li>gen_nat(+L,-N): Instantiates N to L, then L+1, L+2...</li>
                <li>gen_nat(+L,+N): True if N >= L</li>
                <li>gen_nat(-L,+N): ** Succeeds with L = N , then LOOPS **</li>

                <li>gen_int(-X) Instantiates X to 0, then 1, -1, 2, -2, 3, -3...</li>
            </ul>
        </li>
    </ul>
</li>
<li>data_predicate.pl:

    The data predicate system supports storing instances of a type of data
    where each instance has a collection of attributes. The data is stored
    as assertions of the form &lt;type>_&lt;attribute>(ID, Value). The data_predicate
    file contains predicates to manage creating these dynamic predicates from a
    specification and predicates to add an instance with attribute values
    to a defined type.
</li>
<li>dom.pl:
    <ul>
        <li>
            set_dom_name_path_value/2: set the value associated with HTML nodes that
            satisfy the given node name path. A path is a list of names where each name
            is a list of character codes. The nodes on the path may not be sequential
            (i.e. have a direct parent-child relationship).
        </li>
    </ul>
</li>
<li>listut.pl:
    From Edinburgh DEC-10 library.
    <ul>
        <li>correspond/4</li>
        <li>delete/3</li>
        <li>last/2</li>
        <li>nextto/3</li>
        <li>nmember/3</li>
        <li>nmembers/3</li>
        <li>nth0/3</li>
        <li>nth0/4</li>
        <li>nth1/3</li>
        <li>nth1/4</li>
        <li>numlist/3</li>
        <li>perm/2</li>
        <li>perm2/4</li>
        <li>remove_dups/2</li>
        <li>rev/2</li>
        <li>reverse/2</li>
        <li>same_length/2</li>
        <li>select/4</li>
        <li>shorter_list/2</li>
        <li>subseq/3</li>
        <li>subseq0/2</li>
        <li>subseq1/2</li>
        <li>sumlist/2</li>
    </ul>
</li>
<li>listut2.pl:
    Additional list utility predicates created for Proscript.
    <ul>
        <li>append_lists/2</li>
        <li>select_list/4</li>
        <li>contains_list/2</li>
        <li>split_list/4</li>
        <li>lowercase/2</li>
        <li>uppercase/2</li>
    </ul>
</li>
<li id="object.pl">object.pl:
    This specifies the 'object' module.
    It defines a simple syntax for working with the DOM Web API interfaces.
    The main operator is '>>'. The first argument is an object and the second
    argument is a list of property get/set operations, methods, or goals
    to apply to that object.
    For instance to reference the HTMLCanvasElement with id 'canvas' and
    get the 2D context for that element:
    <pre class="html"><code>
Canvas >> [id -:> canvas, getContext('2d') *:> Ctx]. </code></pre>
</li>
<li>setutl.pl
    From Edinburgh DEC-10 library.
    <ul>
        <li>add_element/3</li>
        <li>del_element/3</li>
        <li>disjoint/1</li>
        <li>disjoint/2</li>
        <li>intersect/2</li>
        <li>intersect/3</li>
        <li>listtoset/2</li>
        <li>memberchk/2</li>
        <li>nonmember/2</li>
        <li>pairfrom/4</li>
        <li>select/3</li>
        <li>seteq/2</li>
        <li>subset/2</li>
        <li>subtract/3</li>
        <li>symdiff/3</li>
        <li>union/3</li>
    </ul>
</li>
</ul>
