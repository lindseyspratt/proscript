<h3>Compilation:</h3> When a web page loads a Prolog program it compiles that program.
The program can be compiled into a 'state' file that combines the
standard proscriptls_state.js file and the compiled form of the program
and the web page can load that state file instead of the standard proscriptls_state.js
or the program source.
<br>
This compilation can substantially improve performance of a web page that uses a long Prolog script.
<br>
Compiling a program MYPROGRAM is done by
<code class="javascript inline">node node_compile.js MYPROGRAM.pl MYSTATE.js</code>
where node_compile.js is in /node_tools and proscriptls_for_compile.js is in /dist.
MYSTATE.js is the output from the compilation.
It is used in conjunction with /dist/proscriptls_engine.js.
<br><br>
An example of the use of compilation is /examples/tiles.pl and /examples/tiles.html.
tiles.pl is compiled by the proscriptls_state_tiles.js target of /examples/Makefile:
<pre><code class='cli'>
cd proscriptls/examples;
node ../node_tools/node_compile.js `pwd`/tiles.pl `pwd`/proscriptls_state_tiles.js
</code></pre>
The state Javascript file created by compilation (e.g. proscriptls_state_tiles.js in the above example)
can be checked that it loads cleanly by:
<pre><code class='cli'>
cd proscriptls/examples;
node ../node_tools/node_compile.js `pwd`/tiles.pl `pwd`/proscriptls_state_tiles.js
node ../node_tools/node_goal.js `pwd`/proscriptls_state_tiles.js true
</code></pre>
The node_goal command loads proscriptls_state_tiles.js, initializes the environment by running proscriptls_init(), and
evaluats the trivial query 'true'.
proscriptls_init() also runs danglingPredicates() to identify any defined predicates that are called
but not defined.
<br>
The tiles.html web page uses the result of the compilation by loading the engine and state Javascript files:
<pre><code class='html'>
&lt;script type="text/javascript" src="../dist/proscriptls_engine.js"><&lt;/script>
&lt;script type="text/javascript" src="proscriptls_state_tiles.js"><&lt;/script>
</code></pre>
